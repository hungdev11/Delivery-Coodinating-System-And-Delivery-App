name: Backend CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'BE/**'
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'BE/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: dss

jobs:
  # Job 0: Validate Token
  validate-token:
    runs-on: ubuntu-latest
    steps:
      - name: Check DEPLOY_TOKEN
        run: |
          if [ -z "${{ secrets.DEPLOY_TOKEN }}" ]; then
            echo "❌ DEPLOY_TOKEN not configured"
            exit 1
          fi
          echo "✅ DEPLOY_TOKEN configured"

  # Job 1: Detect changed services
  detect-changes:
    needs: validate-token
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      user-service: ${{ steps.changes.outputs.user-service }}
      settings-service: ${{ steps.changes.outputs.settings-service }}
      any-service: ${{ steps.changes.outputs.any-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api-gateway:
              - 'BE/api-gateway/**'
            user-service:
              - 'BE/User_service/**'
            settings-service:
              - 'BE/Settings_service/**'
            any-service:
              - 'BE/**'

  # Job 2: Test API Gateway
  test-api-gateway:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-gateway == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          cache-dependency-path: BE/api-gateway/pom.xml

      - name: Run API Gateway Tests
        working-directory: BE/api-gateway
        run: |
          chmod +x mvnw
          ./mvnw -B -ntp clean test

  # Job 3: Test User Service
  test-user-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.user-service == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          cache-dependency-path: BE/User_service/pom.xml

      - name: Run User Service Tests
        working-directory: BE/User_service
        run: |
          chmod +x mvnw
          ./mvnw -B -ntp clean test

  # Job 4: Test Settings Service
  test-settings-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.settings-service == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          cache-dependency-path: BE/Settings_service/pom.xml

      - name: Run Settings Service Tests
        working-directory: BE/Settings_service
        run: |
          chmod +x mvnw
          ./mvnw -B -ntp clean test

#   # Job 5: Integration Tests
#   integration-tests:
#     runs-on: ubuntu-latest
#     needs: [test-api-gateway, test-user-service, test-settings-service]
#     if: always() && (needs.test-api-gateway.result == 'success' || needs.test-user-service.result == 'success' || needs.test-settings-service.result == 'success')
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Start services with Docker Compose
#         run: |
#           cd BE
#           docker-compose -f docker-compose.test.yml up -d --build
#           sleep 30  # Wait for services to start

#       - name: Run Integration Tests
#         run: |
#           # Add integration test commands here
#           echo "Running integration tests..."

#       - name: Stop services
#         if: always()
#         run: |
#           cd BE
#           docker-compose -f docker-compose.test.yml down

  # Job 6: Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    # needs: [detect-changes, integration-tests]
    needs: [detect-changes]
    if: needs.detect-changes.outputs.any-service == 'true'
    strategy:
      matrix:
        service:
          - name: api-gateway
            path: BE/api-gateway
            condition: ${{ needs.detect-changes.outputs.api-gateway == 'true' }}
          - name: user-service
            path: BE/User_service
            condition: ${{ needs.detect-changes.outputs.user-service == 'true' }}
          - name: settings-service
            path: BE/Settings_service
            condition: ${{ needs.detect-changes.outputs.settings-service == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
