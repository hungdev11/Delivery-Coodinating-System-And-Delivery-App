package com.ds.deliveryapp;

import android.app.AlertDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.ds.deliveryapp.adapter.TasksAdapter;
import com.ds.deliveryapp.model.DeliveryAssignment;
import com.ds.deliveryapp.utils.TaskActionHandler; // üí° Import Handler m·ªõi
import com.google.android.material.bottomsheet.BottomSheetDialogFragment;

import java.io.Serializable;
import java.util.List;

// üí° TRI·ªÇN KHAI INTERFACE TaskUpdateListener
public class TaskListDialogFragment extends BottomSheetDialogFragment implements TasksAdapter.OnTaskClickListener, TaskActionHandler.TaskUpdateListener {

    private static final String ARG_ASSIGNMENTS = "assignments_list";
    private RecyclerView rvTaskList;
    private List<DeliveryAssignment> assignments;
    private TextView tvSelectedTaskAddress;
    private Button btnCompleteTask;
    private Button btnReportIssue;
    private DeliveryAssignment selectedAssignment;
    private TasksAdapter adapter;

    // üí° BI·∫æN HANDLER M·ªöI
    private TaskActionHandler actionHandler;

    public static TaskListDialogFragment newInstance(List<DeliveryAssignment> assignments) {
        TaskListDialogFragment fragment = new TaskListDialogFragment();
        Bundle args = new Bundle();
        args.putSerializable(ARG_ASSIGNMENTS, (Serializable) assignments);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            assignments = (List<DeliveryAssignment>) getArguments().getSerializable(ARG_ASSIGNMENTS);
        }
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.dialog_list_task, container, false);

        // √Ånh x·∫° Views
        rvTaskList = view.findViewById(R.id.rv_task_list);
        tvSelectedTaskAddress = view.findViewById(R.id.tv_selected_task_address);
        btnCompleteTask = view.findViewById(R.id.btn_complete_task);
        btnReportIssue = view.findViewById(R.id.btn_report_issue);

        // üí° KH·ªûI T·∫†O HANDLER
        if (getActivity() != null) {
            actionHandler = new TaskActionHandler(getActivity(), this);
        }

        // Thi·∫øt l·∫≠p RecyclerView
        adapter = new TasksAdapter(assignments, this);
        rvTaskList.setLayoutManager(new LinearLayoutManager(getContext()));
        rvTaskList.setAdapter(adapter);

        // Hi·ªÉn th·ªã chi ti·∫øt Task ƒë·∫ßu ti√™n (m·∫∑c ƒë·ªãnh)
        if (assignments != null && !assignments.isEmpty()) {
            displayTaskDetails(assignments.get(0));
        }

        // 1. N√∫t HO√ÄN T·∫§T
        btnCompleteTask.setOnClickListener(v -> {
            if (selectedAssignment != null) {
                // üí° G·ªåI HANDLER: B·∫Øt ƒë·∫ßu lu·ªìng ho√†n th√†nh (ch·ª•p ·∫£nh/qu√©t QR)
                actionHandler.startCompletionFlow(selectedAssignment);
                // V√¨ lu·ªìng ho√†n th√†nh c·∫ßn ch·ª•p ·∫£nh (onActivityResult), ta kh√¥ng dismiss ngay
            }
        });

        // 2. N√∫t B√ÅO C√ÅO
        btnReportIssue.setOnClickListener(v -> {
            if (selectedAssignment != null) {
                // üí° G·ªåI HANDLER: B·∫Øt ƒë·∫ßu lu·ªìng th·∫•t b·∫°i (dialog ch·ªçn l√Ω do)
                actionHandler.startFailureFlow(selectedAssignment);
                // Handler s·∫Ω g·ªçi dismiss() sau khi x·ª≠ l√Ω xong
            } else {
                Toast.makeText(getContext(), "Vui l√≤ng ch·ªçn ƒë∆°n h√†ng c·∫ßn b√°o c√°o.", Toast.LENGTH_SHORT).show();
            }
        });

        return view;
    }

    private void displayTaskDetails(DeliveryAssignment assignment) {
        selectedAssignment = assignment;
        tvSelectedTaskAddress.setText("ƒê·ªãa ch·ªâ: " + assignment.getDeliveryLocation() + " " + assignment.getParcelId());
        // C·∫≠p nh·∫≠t c√°c th√¥ng tin chi ti·∫øt kh√°c t·∫°i ƒë√¢y
    }

    @Override
    public void onTaskClick(DeliveryAssignment task) {
        Intent intent = new Intent(getActivity(), TaskDetailActivity.class);
        intent.putExtra("TASK_DETAIL", task);
        startActivity(intent);
    }

    // üí° TRI·ªÇN KHAI PH∆Ø∆†NG TH·ª®C L·∫ÆNG NGHE C·∫¨P NH·∫¨T
    @Override
    public void onStatusUpdated(String newStatus) {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa selectedAssignment (n·∫øu n√≥ l√† FAILED/COMPLETED)
        if (selectedAssignment != null) {
            selectedAssignment.setStatus(newStatus);
            // üí° C·∫≠p nh·∫≠t UI trong Dialog (V√≠ d·ª•: ·∫®n/Hi·ªÉn th·ªã n√∫t, ho·∫∑c refresh list)
            adapter.notifyDataSetChanged();

            // N·∫øu task ƒë√£ ho√†n t·∫•t ho·∫∑c th·∫•t b·∫°i, dismiss Dialog
            if (newStatus.equals("COMPLETED") || newStatus.equals("FAILED")) {
                Toast.makeText(getContext(), "C·∫≠p nh·∫≠t th√†nh c√¥ng: " + newStatus, Toast.LENGTH_SHORT).show();
                dismiss();
            }
        }
    }

    // üí° C·∫¶N X·ª¨ L√ù onActivityResult n·∫øu flow ho√†n th√†nh c·∫ßn ch·ª•p ·∫£nh/qu√©t QR
    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (actionHandler != null && selectedAssignment != null) {
            actionHandler.handleActivityResult(requestCode, resultCode, data, selectedAssignment);
        }
    }
}