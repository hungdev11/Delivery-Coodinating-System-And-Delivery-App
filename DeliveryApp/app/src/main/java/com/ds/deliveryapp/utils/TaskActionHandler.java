package com.ds.deliveryapp.utils;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.Manifest;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.text.InputType;
import android.util.Log;
import android.widget.EditText;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.fragment.app.Fragment;

import com.ds.deliveryapp.clients.SessionClient;
import com.ds.deliveryapp.clients.req.RouteInfo;
import com.ds.deliveryapp.clients.req.TaskFailRequest;
import com.ds.deliveryapp.configs.RetrofitClient;
import com.ds.deliveryapp.model.DeliveryAssignment;
import com.ds.deliveryapp.model.IssueReason;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;

public class TaskActionHandler {

    // ... (Gi·ªØ nguy√™n c√°c bi·∫øn th√†nh vi√™n) ...
    private Activity activity;
    private Fragment fragment;
    private TaskUpdateListener listener;
    private final List<IssueReason> issueReasons;
    public static final int REQUEST_IMAGE_CAPTURE = 1;
    public static final int REQUEST_CAMERA_PERMISSION = 101;
    private static final String TAG = "TASK_ACTION_HANDLER";
    private static final String DRIVER_ID = "0bbfa6a6-1c0b-4e4f-9e6e-11e36c142ea5";

    // üí° S·ª¨A L·ªñI: B·∫¨T L·∫†I photoURI.
    // Ch√∫ng ta C·∫¶N n√≥ ƒë·ªÉ l∆∞u tr·ªØ ƒë∆∞·ªùng d·∫´n file ·∫£nh khi d√πng EXTRA_OUTPUT
    private Uri photoURI;
    private DeliveryAssignment pendingAssignment;

    // Constructor cho Fragment (D√πng cho Dialog)
    public TaskActionHandler(Fragment fragment, TaskUpdateListener listener) {
        this.fragment = fragment;
        this.activity = fragment.getActivity();
        this.listener = listener;
        this.issueReasons = initializeIssueReasons();
    }

    // Constructor cho Activity (D√πng cho TaskDetailActivity)
    public TaskActionHandler(Activity activity, TaskUpdateListener listener) {
        this.activity = activity;
        this.fragment = null;
        this.listener = listener;
        this.issueReasons = initializeIssueReasons();
    }

    public interface TaskUpdateListener {
        void onStatusUpdated(String newStatus);
    }

    private List<IssueReason> initializeIssueReasons() {
        // ... (Gi·ªØ nguy√™n) ...
        List<IssueReason> reasons = new ArrayList<>();
        reasons.add(new IssueReason("Kh√°ch kh√¥ng li√™n l·∫°c ƒë∆∞·ª£c", "CANNOT_CONTACT"));
        reasons.add(new IssueReason("ƒê·ªãa ch·ªâ kh√¥ng t√¨m th·∫•y", "PHANTOM ADDRESS"));
        reasons.add(new IssueReason("Xe b·ªã h·ªèng/s·ª± c·ªë", "ACCIDENT"));
        reasons.add(new IssueReason("L√Ω do kh√°c", "CUSTOM"));
        return reasons;
    }

    public void startCompletionFlow(DeliveryAssignment assignment) {
        // ... (Gi·ªØ nguy√™n) ...
        if (!assignment.getStatus().equals("IN_PROGRESS")) {
            Toast.makeText(activity, "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + assignment.getStatus(), Toast.LENGTH_SHORT).show();
            return;
        }
        this.pendingAssignment = assignment;
        checkPermissionAndLaunchCamera();
    }

    private void checkPermissionAndLaunchCamera() {
        // ... (Gi·ªØ nguy√™n) ...
        if (ContextCompat.checkSelfPermission(activity, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            if (fragment != null) {
                // üí° S·ª¨A: G·ªçi requestPermissions tr√™n Fragment
                fragment.requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
            } else {
                ActivityCompat.requestPermissions(activity, new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
            }
        } else {
            launchCameraIntent();
        }
    }

    private File createImageFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";

        // üí° S·ª¨A: D√πng getExternalFilesDir(Environment.DIRECTORY_PICTURES) cho r√µ r√†ng
        File storageDir = activity.getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,
                ".jpg",
                storageDir
        );
        // üí° S·ª¨A: KH√îNG l∆∞u Uri.fromFile(image).
        // Ch√∫ng ta s·∫Ω l·∫•y Uri t·ª´ FileProvider trong launchCameraIntent.
        return image;
    }

    private void launchCameraIntent() {
        if (pendingAssignment == null) {
            Log.e(TAG, "L·ªói: pendingAssignment l√† null khi g·ªçi camera.");
            return;
        }

        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(activity.getPackageManager()) != null) {

            // --- üí° S·ª¨A L·ªñI: B·∫¨T L·∫†I LOGIC FILEPROVIDER ---
            File photoFile = null;
            try {
                photoFile = createImageFile();
            } catch (IOException ex) {
                Log.e(TAG, "L·ªói t·∫°o file ·∫£nh", ex);
                Toast.makeText(activity, "L·ªói: Kh√¥ng th·ªÉ t·∫°o file ·∫£nh.", Toast.LENGTH_SHORT).show();
                return;
            }

            if (photoFile != null) {
                // ‚ö†Ô∏è QUAN TR·ªåNG: ƒê·∫£m b·∫£o b·∫°n ƒë√£ khai b√°o FileProvider trong AndroidManifest.xml
                // v√† t·∫°o file provider_paths.xml (xem ghi ch√∫ ·ªü cu·ªëi)
                String authority = activity.getPackageName() + ".fileprovider";
                try {
                    photoURI = FileProvider.getUriForFile(activity, authority, photoFile);
                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);

                    Log.d(TAG, "launchCameraIntent: Calling startActivityForResult V·ªöI EXTRA_OUTPUT. Uri: " + photoURI);
                    if (fragment != null) {
                        fragment.startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
                    } else {
                        activity.startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
                    }

                } catch (IllegalArgumentException e) {
                    Log.e(TAG, "L·ªói FileProvider. B·∫°n ƒë√£ khai b√°o ƒë√∫ng 'authority' trong Manifest v√† file_paths.xml ch∆∞a?", e);
                    Toast.makeText(activity, "L·ªói c·∫•u h√¨nh FileProvider.", Toast.LENGTH_LONG).show();
                    // Reset
                    photoURI = null;
                    pendingAssignment = null;
                }
            }
            // --- K·∫æT TH√öC S·ª¨A L·ªñI ---

        } else {
            Toast.makeText(activity, "L·ªói: Kh√¥ng t√¨m th·∫•y ·ª©ng d·ª•ng camera.", Toast.LENGTH_SHORT).show();
            Log.e(TAG, "Kh√¥ng t√¨m th·∫•y ·ª©ng d·ª•ng camera. (ƒê√£ th√™m <queries> trong Manifest ch∆∞a?)");
        }
    }

    // üí° S·ª¨A L·ªñI: THAY ƒê·ªîI HO√ÄN TO√ÄN LOGIC X·ª¨ L√ù K·∫æT QU·∫¢
    public void handleActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        Log.d(TAG, "handleActivityResult - Request Code: " + requestCode + ", Result Code: " + resultCode);

        if (requestCode == REQUEST_IMAGE_CAPTURE) {
            if (resultCode == Activity.RESULT_OK) {
                // 1. Ki·ªÉm tra xem pendingAssignment v√† photoURI c√≥ t·ªìn t·∫°i kh√¥ng
                if (pendingAssignment == null || photoURI == null) {
                    Log.e(TAG, "L·ªói: ƒê√£ ch·ª•p ·∫£nh xong nh∆∞ng pendingAssignment ho·∫∑c photoURI l√† null.");
                    Toast.makeText(activity, "ƒê√£ x·∫£y ra l·ªói khi l∆∞u ·∫£nh.", Toast.LENGTH_SHORT).show();
                    return;
                }

                // 2. V√¨ ƒë√£ d√πng EXTRA_OUTPUT, 'data' Intent s·∫Ω (ho·∫∑c c√≥ th·ªÉ) l√† NULL.
                // ·∫¢nh ƒë·∫ßy ƒë·ªß n·∫±m ·ªü 'photoURI'.
                Log.d(TAG, "·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ª•p v√† l∆∞u t·∫°i: " + photoURI.toString());

                // 3. TODO: UPLOAD ·∫¢NH L√äN SERVER
                // ƒê√¢y l√† n∆°i b·∫°n s·∫Ω g·ªçi service (v√≠ d·ª•: Retrofit + Multipart)
                // ƒë·ªÉ t·∫£i file ·∫£nh t·ª´ 'photoURI' l√™n m√°y ch·ªß l√†m b·∫±ng ch·ª©ng giao h√†ng.

                // 4. (T·∫°m th·ªùi) Gi·∫£ ƒë·ªãnh upload th√†nh c√¥ng v√† ti·∫øp t·ª•c lu·ªìng
                Toast.makeText(activity, "ƒê√£ ch·ª•p ·∫£nh. ƒêang g·ª≠i y√™u c·∫ßu ho√†n th√†nh...", Toast.LENGTH_LONG).show();
                sendCompletionRequest(pendingAssignment);
                listener.onStatusUpdated("COMPLETED");

            } else if (resultCode == Activity.RESULT_CANCELED) {
                // Ng∆∞·ªùi d√πng h·ªßy ch·ª•p ·∫£nh
                Toast.makeText(activity, "ƒê√£ h·ªßy ch·ª•p ·∫£nh.", Toast.LENGTH_SHORT).show();
            }

            // 5. D·ªçn d·∫πp
            // D√π th√†nh c√¥ng hay th·∫•t b·∫°i, h√£y x√≥a c√°c bi·∫øn t·∫°m
            this.pendingAssignment = null;
            this.photoURI = null;
        }
    }

    // --- (C√°c h√†m logic failure gi·ªØ nguy√™n) ---
    public void startFailureFlow(DeliveryAssignment assignment) {
        // ... (Gi·ªØ nguy√™n) ...
        showIssueDialog(assignment);
    }
    private void showIssueDialog(DeliveryAssignment assignment) {
        // ... (Gi·ªØ nguy√™n) ...
        String[] reasonNames = issueReasons.stream()
                .map(r -> r.display)
                .toArray(String[]::new);
        new AlertDialog.Builder(activity)
                .setTitle("B√°o C√°o Th·∫•t B·∫°i")
                .setItems(reasonNames, (dialog, which) -> {
                    IssueReason selectedReason = issueReasons.get(which);
                    if ("CUSTOM".equals(selectedReason.getCode())) {
                        showCustomReasonInputDialog(assignment);
                    } else {
                        showConfirmationDialog(assignment, selectedReason);
                    }
                })
                .setNegativeButton("H·ªßy", (dialog, id) -> dialog.dismiss())
                .create().show();
    }
    private void showCustomReasonInputDialog(DeliveryAssignment assignment) {
        // ... (Gi·ªØ nguy√™n) ...
        AlertDialog.Builder builder = new AlertDialog.Builder(activity);
        builder.setTitle("Nh·∫≠p l√Ω do th·∫•t b·∫°i t√πy ch·ªânh");
        final EditText input = new EditText(activity);
        input.setInputType(InputType.TYPE_CLASS_TEXT);
        input.setHint("V√≠ d·ª•: H√†ng c·∫•m, kh√¥ng ƒë√∫ng k√≠ch th∆∞·ªõc...");
        builder.setView(input);
        builder.setPositiveButton("X√°c Nh·∫≠n", (dialog, which) -> {
            String customReason = input.getText().toString().trim();
            if (customReason.isEmpty()) {
                Toast.makeText(activity, "L√Ω do kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.", Toast.LENGTH_SHORT).show();
            } else {
                dispatchFailureEvent(assignment, null, customReason);
                listener.onStatusUpdated("FAILED");
                dialog.dismiss();
            }
        });
        builder.setNegativeButton("H·ªßy", (dialog, which) -> dialog.cancel());
        builder.show();
    }
    private void showConfirmationDialog(DeliveryAssignment assignment, IssueReason reason) {
        // ... (Gi·ªØ nguy√™n) ...
        new AlertDialog.Builder(activity)
                .setTitle("X√°c Nh·∫≠n Th·∫•t B·∫°i")
                .setMessage("X√°c nh·∫≠n l√Ω do TH·∫§T B·∫†I:\n\"" + reason.display + "\"\ncho ƒë∆°n h√†ng " + assignment.getParcelCode() + "?")
                .setPositiveButton("X√°c Nh·∫≠n", (dialog, id) -> {
                    dispatchFailureEvent(assignment, reason, null);
                    listener.onStatusUpdated("FAILED");
                    dialog.dismiss();
                })
                .setNegativeButton("Quay L·∫°i", (dialog, id) -> dialog.dismiss())
                .create().show();
    }

    // --- (H√†m handlePermissionResult gi·ªØ nguy√™n) ---
    public void handlePermissionResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == REQUEST_CAMERA_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(activity, "ƒê√£ c·∫•p quy·ªÅn Camera. M·ªü camera...", Toast.LENGTH_SHORT).show();
                launchCameraIntent();
            } else {
                Toast.makeText(activity, "B·∫°n ph·∫£i c·∫•p quy·ªÅn camera ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng.", Toast.LENGTH_LONG).show();
                // üí° TH√äM: Reset pendingAssignment n·∫øu b·ªã t·ª´ ch·ªëi quy·ªÅn
                this.pendingAssignment = null;
            }
        }
    }

    // --- (To√†n b·ªô logic g·ªçi API: sendCompletionRequest, dispatchFailureEvent... gi·ªØ nguy√™n) ---
    private void sendCompletionRequest(DeliveryAssignment assignment) {
        // ... (Gi·ªØ nguy√™n) ...
        if (assignment == null) {
            Log.e(TAG, "L·ªói: Assignment l√† null khi g·ª≠i request.");
            return;
        }
        boolean flag = true;
        if (!flag) {
            Log.e(TAG, "NOT APPROPRIATE PARCEL AND CURRENT TASK");
            return;
        }
        Retrofit retrofit = RetrofitClient.getRetrofitInstance(activity.getApplicationContext());
        SessionClient service = retrofit.create(SessionClient.class);
        RouteInfo routeInfo = RouteInfo.builder().distanceM(1000).durationS(1000).waypoints("{}").build();
        Call<DeliveryAssignment> call = service.completeTask(DRIVER_ID, assignment.getParcelId(), routeInfo);
        call.enqueue(new Callback<DeliveryAssignment>() {
            @Override
            public void onResponse(Call<DeliveryAssignment> call, Response<DeliveryAssignment> response) {
                if (response.isSuccessful()) { Log.d(TAG, "Task COMPLETED event sent successfully."); }
                else { Log.e(TAG, "Response unsuccessful: " + response.code()); }
            }
            @Override
            public void onFailure(Call<DeliveryAssignment> call, Throwable t) {
                Log.e(TAG, "Network error on failure: " + t.getMessage());
            }
        });
    }
    private void dispatchFailureEvent(DeliveryAssignment assignment, @Nullable IssueReason reason, @Nullable String customReason) {
        // ... (Gi·ªØ nguy√™n) ...
        String finalReason = (reason != null) ? reason.getDisplay() : customReason;
        String apiValue = (reason != null) ? reason.getCode() : "CUSTOM";
        RouteInfo routeInfo = RouteInfo.builder().distanceM(1000).durationS(1000).waypoints("{}").build();
        TaskFailRequest requestBody = new TaskFailRequest(finalReason, routeInfo);
        switch (apiValue) {
            case "CANNOT_CONTACT":
            case "ACCIDENT":
            case "PHANTOM_ADDRESS":
            case "CUSTOM":
            default:
                callFailApi(assignment, requestBody);
                break;
        }
    }
    private void callFailApi(DeliveryAssignment assignment, TaskFailRequest requestBody) {
        // ... (Gi·ªØ nguy√™n) ...
        Retrofit retrofit = RetrofitClient.getRetrofitInstance(activity.getApplicationContext());
        SessionClient service = retrofit.create(SessionClient.class);
        Call<DeliveryAssignment> call = service.failTask(DRIVER_ID, assignment.getParcelId(), requestBody);
        call.enqueue(new Callback<DeliveryAssignment>() {
            @Override
            public void onResponse(Call<DeliveryAssignment> call, Response<DeliveryAssignment> response) {
                if (response.isSuccessful()) { Log.d(TAG, "Task FAILED event sent successfully."); }
                else { Log.e(TAG, "Response (Fail) unsuccessful: " + response.code()); }
            }
            @Override
            public void onFailure(Call<DeliveryAssignment> call, Throwable t) {
                Log.e(TAG, "Network error (Fail): " + t.getMessage());
            }
        });
    }
    private void callRefuseApi(DeliveryAssignment assignment, TaskFailRequest requestBody) {
        // ... (Gi·ªØ nguy√™n) ...
        Retrofit retrofit = RetrofitClient.getRetrofitInstance(activity.getApplicationContext());
        SessionClient service = retrofit.create(SessionClient.class);
        Call<DeliveryAssignment> call = service.refuseTask(DRIVER_ID, assignment.getParcelId(), requestBody);
        call.enqueue(new Callback<DeliveryAssignment>() {
            @Override
            public void onResponse(Call<DeliveryAssignment> call, Response<DeliveryAssignment> response) {
                if (response.isSuccessful()) { Log.d(TAG, "Task REFUSED event sent successfully."); }
                else { Log.e(TAG, "Response (Refuse) unsuccessful: " + response.code()); }
            }
            @Override
            public void onFailure(Call<DeliveryAssignment> call, Throwable t) {
                Log.e(TAG, "Network error (Refuse): " + t.getMessage());
            }
        });
    }
}