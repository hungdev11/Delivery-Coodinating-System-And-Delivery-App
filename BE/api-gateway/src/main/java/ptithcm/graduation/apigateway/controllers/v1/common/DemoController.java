package ptithcm.graduation.apigateway.controllers.v1.common;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.*;
import ptithcm.graduation.apigateway.annotations.AuthRequired;
import ptithcm.graduation.apigateway.annotations.PublicRoute;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/v1/demo")
@RequiredArgsConstructor
// Máº·c Ä‘á»‹nh: yÃªu cáº§u pháº£i Ä‘Äƒng nháº­p (vÃ o Ä‘Æ°á»£c Ä‘Ã¢y thÃ¬ má»›i xá»­ lÃ½)
@AuthRequired
public class DemoController {

    /**
     * ðŸ”“ PUBLIC ROUTE: KhÃ´ng cáº§n token
     * Sá»­ dá»¥ng @PublicRoute annotation Ä‘á»ƒ ghi Ä‘Ã¨ @AuthRequired á»Ÿ class
     */
    @PublicRoute
    @GetMapping("/public-info")
    public ResponseEntity<Map<String, Object>> publicInfo() {
        Map<String, Object> response = new HashMap<>();
        response.put("message", "This is public information");
        response.put("timestamp", System.currentTimeMillis());
        response.put("status", "public");
        
        log.info("Public route accessed");
        return ResponseEntity.ok(response);
    }

    /**
     * ðŸ”’ AUTHENTICATED ROUTE: Chá»‰ user Ä‘Äƒng nháº­p (khá»›p vá»›i @AuthRequired á»Ÿ class)
     * KhÃ´ng cáº§n annotation gÃ¬ thÃªm, tá»± Ä‘á»™ng káº¿ thá»«a tá»« class
     */
    @GetMapping("/me")
    public ResponseEntity<Map<String, Object>> me(@AuthenticationPrincipal Jwt jwt) {
        Map<String, Object> response = new HashMap<>();
        response.put("message", "User profile information");
        response.put("userId", jwt.getSubject());
        response.put("email", jwt.getClaimAsString("email"));
        response.put("roles", jwt.getClaimAsStringList("roles"));
        response.put("timestamp", System.currentTimeMillis());
        
        log.info("Authenticated route accessed by user: {}", jwt.getSubject());
        return ResponseEntity.ok(response);
    }

    /**
     * ðŸ”’ ROLE-BASED ROUTE: YÃªu cáº§u role ADMIN
     * Sá»­ dá»¥ng @PreAuthorize Ä‘á»ƒ kiá»ƒm tra role cá»¥ thá»ƒ
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/admin-action")
    public ResponseEntity<Map<String, Object>> adminAction(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        response.put("message", "Admin action executed successfully");
        response.put("action", request.get("action"));
        response.put("timestamp", System.currentTimeMillis());
        response.put("requiredRole", "ADMIN");
        
        log.info("Admin action executed: {}", request.get("action"));
        return ResponseEntity.ok(response);
    }

    /**
     * ðŸ”’ ROLE-BASED ROUTE: YÃªu cáº§u role MANAGER
     * Sá»­ dá»¥ng @PreAuthorize Ä‘á»ƒ kiá»ƒm tra role cá»¥ thá»ƒ
     */
    @PreAuthorize("hasRole('MANAGER')")
    @PutMapping("/manager-action/{id}")
    public ResponseEntity<Map<String, Object>> managerAction(
            @PathVariable String id,
            @RequestBody Map<String, Object> request) {
        
        Map<String, Object> response = new HashMap<>();
        response.put("message", "Manager action executed successfully");
        response.put("resourceId", id);
        response.put("action", request.get("action"));
        response.put("timestamp", System.currentTimeMillis());
        response.put("requiredRole", "MANAGER");
        
        log.info("Manager action executed on resource {}: {}", id, request.get("action"));
        return ResponseEntity.ok(response);
    }

    /**
     * ðŸ”’ SCOPE-BASED ROUTE: YÃªu cáº§u scope cá»¥ thá»ƒ (náº¿u dÃ¹ng OAuth2 scopes)
     * Sá»­ dá»¥ng @PreAuthorize Ä‘á»ƒ kiá»ƒm tra authority
     */
    @PreAuthorize("hasAuthority('SCOPE_demo:write')")
    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, Object>> deleteResource(@PathVariable String id) {
        Map<String, Object> response = new HashMap<>();
        response.put("message", "Resource deleted successfully");
        response.put("resourceId", id);
        response.put("timestamp", System.currentTimeMillis());
        response.put("requiredScope", "demo:write");
        
        log.info("Resource deleted: {}", id);
        return ResponseEntity.ok(response);
    }

    /**
     * ðŸ”’ CUSTOM EXPRESSION: YÃªu cáº§u logic phá»©c táº¡p hÆ¡n
     * VÃ­ dá»¥: chá»‰ cho phÃ©p user sá»­a thÃ´ng tin cá»§a chÃ­nh mÃ¬nh
     */
    @PreAuthorize("authentication.principal.subject == #userId")
    @PatchMapping("/profile/{userId}")
    public ResponseEntity<Map<String, Object>> updateOwnProfile(
            @PathVariable String userId,
            @RequestBody Map<String, Object> request) {
        
        Map<String, Object> response = new HashMap<>();
        response.put("message", "Profile updated successfully");
        response.put("userId", userId);
        response.put("updatedFields", request.keySet());
        response.put("timestamp", System.currentTimeMillis());
        response.put("security", "self-only");
        
        log.info("Profile updated for user: {}", userId);
        return ResponseEntity.ok(response);
    }
}
